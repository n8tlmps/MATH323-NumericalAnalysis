import numpy as np
def gaussianQuad(f, a, b, n):
    # change of var
    w = lambda t: ((b-a) / 2) * t + ((b+a) / 2)

    # g(t)
    g = lambda t: f(w(t)) * ((b-a) / 2)

    # list the coeff & integration pts
    match n:
        case 2:
            c1 = 1.0000000000
            c2 = 1.0000000000
            x1 = .5773502692
            x2 = -0.5773502692
            I = c1*g(x1) + c2*g(x2)
        case 3:
            c1 = 0.5555555556
            c2 = 0.8888888889
            c3 = 0.5555555556
            x1 = 0.7745966692
            x2 = 0.0000000000
            x3 = -0.7745966692
            I = c1*g(x1) + c2*g(x2) + c3*g(x3)
        case 4:
            c1 = 0.3478548451
            c2 = 0.6521451549
            c3 = 0.6521451549
            c4 = 0.3478548451
            x1 = 0.8611363116
            x2 = 0.3399810436
            x3 = -0.3399810436
            x4 = -0.8611363116
            I = c1*g(x1) + c2*g(x2) + c3*g(x3) + c4*g(x4)
        case 5:
            c1 = 0.2369268850
            c2 = 0.4786286705
            c3 = 0.5688888889
            c4 = 0.4786286705
            c5 = 0.2369268850
            x1 = 0.9061798459
            x2 = 0.5384693101
            x3 = 0.0000000000
            x4 = -0.5384693101
            x5 = -0.9061798459
            I = c1*g(x1) + c2*g(x2) + c3*g(x3) + c4*g(x4) + c5*g(x5)
        case _:
            print("n must be in [2, 3, 4, 5]")
            return None
    return I

